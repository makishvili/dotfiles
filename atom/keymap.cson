# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# *
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.platform-darwin atom-text-editor':
    'f3': 'find-and-replace:find-next-selected'
    'shift-f3': 'find-and-replace:find-previous-selected'

'body':
  'cmd-y': 'unset!'

'atom-text-editor':
    'shift-cmd-backspace': 'unset!'
    'alt-shift-left': 'editor:select-to-previous-subword-boundary'
    'alt-shift-right': 'editor:select-to-next-subword-boundary'
    'alt-left': 'editor:move-to-previous-subword-boundary'
    'alt-right': 'editor:move-to-next-subword-boundary'
    'cmd-]': 'bracket-matcher:go-to-matching-bracket'

'atom-workspace':
    'ctrl-i': 'unset!'
    'cmd-shift-backspace': 'goto-last-edit:back'

'atom-workspace atom-text-editor:not([mini])':
    'shift-enter': 'editor:newline-below'

'atom-text-editor:not([mini])':
    'cmd-y': 'editor:delete-line'
